// Code generated by protoc-gen-go. DO NOT EDIT.
// source: mesh/v1alpha1/dataplane.proto

package v1alpha1

import (
	fmt "fmt"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Dataplane defines configuration of a side-car proxy.
type Dataplane struct {
	// Networking describes inbound and outbound interfaces of the dataplane.
	Networking *Dataplane_Networking `protobuf:"bytes,1,opt,name=networking,proto3" json:"networking,omitempty"`
	// Configuration for metrics that should be collected and exposed by the
	// dataplane.
	//
	// Settings defined here will override their respective defaults
	// defined at a Mesh level.
	Metrics              *MetricsBackend `protobuf:"bytes,2,opt,name=metrics,proto3" json:"metrics,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *Dataplane) Reset()         { *m = Dataplane{} }
func (m *Dataplane) String() string { return proto.CompactTextString(m) }
func (*Dataplane) ProtoMessage()    {}
func (*Dataplane) Descriptor() ([]byte, []int) {
	return fileDescriptor_7608682fd5ea84a4, []int{0}
}

func (m *Dataplane) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Dataplane.Unmarshal(m, b)
}
func (m *Dataplane) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Dataplane.Marshal(b, m, deterministic)
}
func (m *Dataplane) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Dataplane.Merge(m, src)
}
func (m *Dataplane) XXX_Size() int {
	return xxx_messageInfo_Dataplane.Size(m)
}
func (m *Dataplane) XXX_DiscardUnknown() {
	xxx_messageInfo_Dataplane.DiscardUnknown(m)
}

var xxx_messageInfo_Dataplane proto.InternalMessageInfo

func (m *Dataplane) GetNetworking() *Dataplane_Networking {
	if m != nil {
		return m.Networking
	}
	return nil
}

func (m *Dataplane) GetMetrics() *MetricsBackend {
	if m != nil {
		return m.Metrics
	}
	return nil
}

// Networking describes inbound and outbound interfaces of a dataplane.
type Dataplane_Networking struct {
	// Ingress if not nil, dataplane will be work in the Ingress mode
	Ingress []*Dataplane_Networking_Ingress `protobuf:"bytes,6,rep,name=ingress,proto3" json:"ingress,omitempty"`
	// Public IP on which the dataplane is accessible in the network.
	// Host names and DNS are not allowed.
	Address string `protobuf:"bytes,5,opt,name=address,proto3" json:"address,omitempty"`
	// Gateway describes configuration of gateway of the dataplane.
	Gateway *Dataplane_Networking_Gateway `protobuf:"bytes,3,opt,name=gateway,proto3" json:"gateway,omitempty"`
	// Inbound describes a list of inbound interfaces of the dataplane.
	Inbound []*Dataplane_Networking_Inbound `protobuf:"bytes,1,rep,name=inbound,proto3" json:"inbound,omitempty"`
	// Outbound describes a list of outbound interfaces of the dataplane.
	Outbound []*Dataplane_Networking_Outbound `protobuf:"bytes,2,rep,name=outbound,proto3" json:"outbound,omitempty"`
	// TransparentProxying describes configuration for transparent proxying.
	TransparentProxying  *Dataplane_Networking_TransparentProxying `protobuf:"bytes,4,opt,name=transparent_proxying,json=transparentProxying,proto3" json:"transparent_proxying,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                  `json:"-"`
	XXX_unrecognized     []byte                                    `json:"-"`
	XXX_sizecache        int32                                     `json:"-"`
}

func (m *Dataplane_Networking) Reset()         { *m = Dataplane_Networking{} }
func (m *Dataplane_Networking) String() string { return proto.CompactTextString(m) }
func (*Dataplane_Networking) ProtoMessage()    {}
func (*Dataplane_Networking) Descriptor() ([]byte, []int) {
	return fileDescriptor_7608682fd5ea84a4, []int{0, 0}
}

func (m *Dataplane_Networking) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Dataplane_Networking.Unmarshal(m, b)
}
func (m *Dataplane_Networking) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Dataplane_Networking.Marshal(b, m, deterministic)
}
func (m *Dataplane_Networking) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Dataplane_Networking.Merge(m, src)
}
func (m *Dataplane_Networking) XXX_Size() int {
	return xxx_messageInfo_Dataplane_Networking.Size(m)
}
func (m *Dataplane_Networking) XXX_DiscardUnknown() {
	xxx_messageInfo_Dataplane_Networking.DiscardUnknown(m)
}

var xxx_messageInfo_Dataplane_Networking proto.InternalMessageInfo

func (m *Dataplane_Networking) GetIngress() []*Dataplane_Networking_Ingress {
	if m != nil {
		return m.Ingress
	}
	return nil
}

func (m *Dataplane_Networking) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Dataplane_Networking) GetGateway() *Dataplane_Networking_Gateway {
	if m != nil {
		return m.Gateway
	}
	return nil
}

func (m *Dataplane_Networking) GetInbound() []*Dataplane_Networking_Inbound {
	if m != nil {
		return m.Inbound
	}
	return nil
}

func (m *Dataplane_Networking) GetOutbound() []*Dataplane_Networking_Outbound {
	if m != nil {
		return m.Outbound
	}
	return nil
}

func (m *Dataplane_Networking) GetTransparentProxying() *Dataplane_Networking_TransparentProxying {
	if m != nil {
		return m.TransparentProxying
	}
	return nil
}

// Ingress allows us to configure dataplane in the Ingress mode. In this
// mode, dataplane has only inbound interfaces (outbound and gateway
// prohibited). Every inbound interface matches with services that reside in
// that cluster.
type Dataplane_Networking_Ingress struct {
	Service              string            `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty"`
	Tags                 map[string]string `protobuf:"bytes,2,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Dataplane_Networking_Ingress) Reset()         { *m = Dataplane_Networking_Ingress{} }
func (m *Dataplane_Networking_Ingress) String() string { return proto.CompactTextString(m) }
func (*Dataplane_Networking_Ingress) ProtoMessage()    {}
func (*Dataplane_Networking_Ingress) Descriptor() ([]byte, []int) {
	return fileDescriptor_7608682fd5ea84a4, []int{0, 0, 0}
}

func (m *Dataplane_Networking_Ingress) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Dataplane_Networking_Ingress.Unmarshal(m, b)
}
func (m *Dataplane_Networking_Ingress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Dataplane_Networking_Ingress.Marshal(b, m, deterministic)
}
func (m *Dataplane_Networking_Ingress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Dataplane_Networking_Ingress.Merge(m, src)
}
func (m *Dataplane_Networking_Ingress) XXX_Size() int {
	return xxx_messageInfo_Dataplane_Networking_Ingress.Size(m)
}
func (m *Dataplane_Networking_Ingress) XXX_DiscardUnknown() {
	xxx_messageInfo_Dataplane_Networking_Ingress.DiscardUnknown(m)
}

var xxx_messageInfo_Dataplane_Networking_Ingress proto.InternalMessageInfo

func (m *Dataplane_Networking_Ingress) GetService() string {
	if m != nil {
		return m.Service
	}
	return ""
}

func (m *Dataplane_Networking_Ingress) GetTags() map[string]string {
	if m != nil {
		return m.Tags
	}
	return nil
}

// Inbound describes a service implemented by the dataplane.
type Dataplane_Networking_Inbound struct {
	// DEPRECATED: use networking.address, networking.inbound[].port and
	// networking.inbound[].servicePort Interface describes networking rules
	// for incoming traffic. The value is a string formatted as
	// <DATAPLANE_IP>:<DATAPLANE_PORT>:<WORKLOAD_PORT>, which means
	// that dataplane must listen on <DATAPLANE_IP>:<DATAPLANE_PORT>
	// and must dispatch to 127.0.0.1:<WORKLOAD_PORT>.
	//
	// E.g.,
	// "192.168.0.100:9090:8080" in case of IPv4 or
	// "[2001:db8::1]:7070:6060" in case of IPv6.
	Interface string `protobuf:"bytes,1,opt,name=interface,proto3" json:"interface,omitempty"`
	// Port of the inbound interface that will forward requests to the
	// service.
	Port uint32 `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
	// Port of the service that requests will be forwarded to.
	ServicePort uint32 `protobuf:"varint,4,opt,name=servicePort,proto3" json:"servicePort,omitempty"`
	// Address on which inbound listener will be exposed. Defaults to
	// networking.address.
	Address string `protobuf:"bytes,5,opt,name=address,proto3" json:"address,omitempty"`
	// Tags associated with an application this dataplane is deployed next to,
	// e.g. service=web, version=1.0.
	// `service` tag is mandatory.
	Tags                 map[string]string `protobuf:"bytes,2,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Dataplane_Networking_Inbound) Reset()         { *m = Dataplane_Networking_Inbound{} }
func (m *Dataplane_Networking_Inbound) String() string { return proto.CompactTextString(m) }
func (*Dataplane_Networking_Inbound) ProtoMessage()    {}
func (*Dataplane_Networking_Inbound) Descriptor() ([]byte, []int) {
	return fileDescriptor_7608682fd5ea84a4, []int{0, 0, 1}
}

func (m *Dataplane_Networking_Inbound) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Dataplane_Networking_Inbound.Unmarshal(m, b)
}
func (m *Dataplane_Networking_Inbound) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Dataplane_Networking_Inbound.Marshal(b, m, deterministic)
}
func (m *Dataplane_Networking_Inbound) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Dataplane_Networking_Inbound.Merge(m, src)
}
func (m *Dataplane_Networking_Inbound) XXX_Size() int {
	return xxx_messageInfo_Dataplane_Networking_Inbound.Size(m)
}
func (m *Dataplane_Networking_Inbound) XXX_DiscardUnknown() {
	xxx_messageInfo_Dataplane_Networking_Inbound.DiscardUnknown(m)
}

var xxx_messageInfo_Dataplane_Networking_Inbound proto.InternalMessageInfo

func (m *Dataplane_Networking_Inbound) GetInterface() string {
	if m != nil {
		return m.Interface
	}
	return ""
}

func (m *Dataplane_Networking_Inbound) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *Dataplane_Networking_Inbound) GetServicePort() uint32 {
	if m != nil {
		return m.ServicePort
	}
	return 0
}

func (m *Dataplane_Networking_Inbound) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Dataplane_Networking_Inbound) GetTags() map[string]string {
	if m != nil {
		return m.Tags
	}
	return nil
}

// Outbound describes a service consumed by the dataplane.
type Dataplane_Networking_Outbound struct {
	// DEPRECATED: use networking.address and networking.outbound[].port
	// Interface describes networking rules for outgoing traffic.
	// The value is a string formatted as <DATAPLANE_IP>:<DATAPLANE_PORT>,
	// which means that dataplane must listen on
	// <DATAPLANE_IP>:<DATAPLANE_PORT> and must be dispatch to
	// <SERVICE>:<SERVICE_PORT>.
	//
	// E.g.,
	// "127.0.0.1:9090" in case of IPv4 or
	// "[::1]:8080" in case of IPv6 or
	// ":7070".
	Interface string `protobuf:"bytes,1,opt,name=interface,proto3" json:"interface,omitempty"`
	// Address on which the service will be available to this dataplane.
	// Defaults to 127.0.0.1
	Address string `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	// Port on which the service will be available to this dataplane.
	Port uint32 `protobuf:"varint,4,opt,name=port,proto3" json:"port,omitempty"`
	// Service name.
	Service              string   `protobuf:"bytes,2,opt,name=service,proto3" json:"service,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Dataplane_Networking_Outbound) Reset()         { *m = Dataplane_Networking_Outbound{} }
func (m *Dataplane_Networking_Outbound) String() string { return proto.CompactTextString(m) }
func (*Dataplane_Networking_Outbound) ProtoMessage()    {}
func (*Dataplane_Networking_Outbound) Descriptor() ([]byte, []int) {
	return fileDescriptor_7608682fd5ea84a4, []int{0, 0, 2}
}

func (m *Dataplane_Networking_Outbound) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Dataplane_Networking_Outbound.Unmarshal(m, b)
}
func (m *Dataplane_Networking_Outbound) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Dataplane_Networking_Outbound.Marshal(b, m, deterministic)
}
func (m *Dataplane_Networking_Outbound) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Dataplane_Networking_Outbound.Merge(m, src)
}
func (m *Dataplane_Networking_Outbound) XXX_Size() int {
	return xxx_messageInfo_Dataplane_Networking_Outbound.Size(m)
}
func (m *Dataplane_Networking_Outbound) XXX_DiscardUnknown() {
	xxx_messageInfo_Dataplane_Networking_Outbound.DiscardUnknown(m)
}

var xxx_messageInfo_Dataplane_Networking_Outbound proto.InternalMessageInfo

func (m *Dataplane_Networking_Outbound) GetInterface() string {
	if m != nil {
		return m.Interface
	}
	return ""
}

func (m *Dataplane_Networking_Outbound) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Dataplane_Networking_Outbound) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *Dataplane_Networking_Outbound) GetService() string {
	if m != nil {
		return m.Service
	}
	return ""
}

// Gateway describes a service that ingress should not be proxied.
type Dataplane_Networking_Gateway struct {
	// Tags associated with a gateway (e.g., Kong, Contour, etc) this
	// dataplane is deployed next to, e.g. service=gateway, env=prod.
	// `service` tag is mandatory.
	Tags                 map[string]string `protobuf:"bytes,1,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Dataplane_Networking_Gateway) Reset()         { *m = Dataplane_Networking_Gateway{} }
func (m *Dataplane_Networking_Gateway) String() string { return proto.CompactTextString(m) }
func (*Dataplane_Networking_Gateway) ProtoMessage()    {}
func (*Dataplane_Networking_Gateway) Descriptor() ([]byte, []int) {
	return fileDescriptor_7608682fd5ea84a4, []int{0, 0, 3}
}

func (m *Dataplane_Networking_Gateway) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Dataplane_Networking_Gateway.Unmarshal(m, b)
}
func (m *Dataplane_Networking_Gateway) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Dataplane_Networking_Gateway.Marshal(b, m, deterministic)
}
func (m *Dataplane_Networking_Gateway) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Dataplane_Networking_Gateway.Merge(m, src)
}
func (m *Dataplane_Networking_Gateway) XXX_Size() int {
	return xxx_messageInfo_Dataplane_Networking_Gateway.Size(m)
}
func (m *Dataplane_Networking_Gateway) XXX_DiscardUnknown() {
	xxx_messageInfo_Dataplane_Networking_Gateway.DiscardUnknown(m)
}

var xxx_messageInfo_Dataplane_Networking_Gateway proto.InternalMessageInfo

func (m *Dataplane_Networking_Gateway) GetTags() map[string]string {
	if m != nil {
		return m.Tags
	}
	return nil
}

// TransparentProxying describes configuration for transparent proxying.
type Dataplane_Networking_TransparentProxying struct {
	// Port on which all traffic is being transparently redirected.
	RedirectPort uint32 `protobuf:"varint,1,opt,name=redirect_port,json=redirectPort,proto3" json:"redirect_port,omitempty"`
	// List of services that will be access directly via IP:PORT
	DirectAccessServices []string `protobuf:"bytes,2,rep,name=direct_access_services,json=directAccessServices,proto3" json:"direct_access_services,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Dataplane_Networking_TransparentProxying) Reset() {
	*m = Dataplane_Networking_TransparentProxying{}
}
func (m *Dataplane_Networking_TransparentProxying) String() string { return proto.CompactTextString(m) }
func (*Dataplane_Networking_TransparentProxying) ProtoMessage()    {}
func (*Dataplane_Networking_TransparentProxying) Descriptor() ([]byte, []int) {
	return fileDescriptor_7608682fd5ea84a4, []int{0, 0, 4}
}

func (m *Dataplane_Networking_TransparentProxying) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Dataplane_Networking_TransparentProxying.Unmarshal(m, b)
}
func (m *Dataplane_Networking_TransparentProxying) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Dataplane_Networking_TransparentProxying.Marshal(b, m, deterministic)
}
func (m *Dataplane_Networking_TransparentProxying) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Dataplane_Networking_TransparentProxying.Merge(m, src)
}
func (m *Dataplane_Networking_TransparentProxying) XXX_Size() int {
	return xxx_messageInfo_Dataplane_Networking_TransparentProxying.Size(m)
}
func (m *Dataplane_Networking_TransparentProxying) XXX_DiscardUnknown() {
	xxx_messageInfo_Dataplane_Networking_TransparentProxying.DiscardUnknown(m)
}

var xxx_messageInfo_Dataplane_Networking_TransparentProxying proto.InternalMessageInfo

func (m *Dataplane_Networking_TransparentProxying) GetRedirectPort() uint32 {
	if m != nil {
		return m.RedirectPort
	}
	return 0
}

func (m *Dataplane_Networking_TransparentProxying) GetDirectAccessServices() []string {
	if m != nil {
		return m.DirectAccessServices
	}
	return nil
}

func init() {
	proto.RegisterType((*Dataplane)(nil), "kuma.mesh.v1alpha1.Dataplane")
	proto.RegisterType((*Dataplane_Networking)(nil), "kuma.mesh.v1alpha1.Dataplane.Networking")
	proto.RegisterType((*Dataplane_Networking_Ingress)(nil), "kuma.mesh.v1alpha1.Dataplane.Networking.Ingress")
	proto.RegisterMapType((map[string]string)(nil), "kuma.mesh.v1alpha1.Dataplane.Networking.Ingress.TagsEntry")
	proto.RegisterType((*Dataplane_Networking_Inbound)(nil), "kuma.mesh.v1alpha1.Dataplane.Networking.Inbound")
	proto.RegisterMapType((map[string]string)(nil), "kuma.mesh.v1alpha1.Dataplane.Networking.Inbound.TagsEntry")
	proto.RegisterType((*Dataplane_Networking_Outbound)(nil), "kuma.mesh.v1alpha1.Dataplane.Networking.Outbound")
	proto.RegisterType((*Dataplane_Networking_Gateway)(nil), "kuma.mesh.v1alpha1.Dataplane.Networking.Gateway")
	proto.RegisterMapType((map[string]string)(nil), "kuma.mesh.v1alpha1.Dataplane.Networking.Gateway.TagsEntry")
	proto.RegisterType((*Dataplane_Networking_TransparentProxying)(nil), "kuma.mesh.v1alpha1.Dataplane.Networking.TransparentProxying")
}

func init() { proto.RegisterFile("mesh/v1alpha1/dataplane.proto", fileDescriptor_7608682fd5ea84a4) }

var fileDescriptor_7608682fd5ea84a4 = []byte{
	// 576 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x54, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0x96, 0x1d, 0x27, 0x8e, 0x27, 0x44, 0x42, 0xdb, 0x08, 0x2c, 0x03, 0x52, 0xe8, 0x29, 0xe2,
	0xe0, 0x90, 0x82, 0x04, 0xaa, 0x7a, 0xc1, 0x02, 0x41, 0x91, 0x5a, 0xaa, 0xa5, 0x07, 0xc4, 0x25,
	0xda, 0xda, 0x4b, 0x62, 0x25, 0xb1, 0xad, 0xf5, 0x26, 0x25, 0xe2, 0x0d, 0x78, 0x04, 0x04, 0x6f,
	0xc0, 0x8d, 0xb7, 0xcb, 0xa5, 0xc8, 0xfb, 0x63, 0xa7, 0x6a, 0x05, 0x09, 0xa8, 0xb7, 0xdd, 0x99,
	0xf9, 0xbe, 0x99, 0xf9, 0xfc, 0xad, 0xe1, 0xc1, 0x8c, 0xe6, 0xe3, 0xfe, 0x62, 0x40, 0xa6, 0xd9,
	0x98, 0x0c, 0xfa, 0x11, 0xe1, 0x24, 0x9b, 0x92, 0x84, 0xfa, 0x19, 0x4b, 0x79, 0x8a, 0xd0, 0x64,
	0x3e, 0x23, 0x7e, 0x51, 0xe3, 0xeb, 0x1a, 0xef, 0xde, 0x65, 0xc8, 0x8c, 0x72, 0x16, 0x87, 0xb9,
	0x04, 0x78, 0x77, 0x17, 0x64, 0x1a, 0x47, 0x84, 0xd3, 0xbe, 0x3e, 0xc8, 0xc4, 0xee, 0xaf, 0x16,
	0x38, 0x2f, 0x35, 0x3b, 0x7a, 0x03, 0x90, 0x50, 0x7e, 0x9e, 0xb2, 0x49, 0x9c, 0x8c, 0x5c, 0xa3,
	0x6b, 0xf4, 0x5a, 0x7b, 0x3d, 0xff, 0x6a, 0x33, 0xbf, 0x84, 0xf8, 0xc7, 0x65, 0x3d, 0x5e, 0xc3,
	0xa2, 0x03, 0xb0, 0xd5, 0x04, 0xae, 0x29, 0x68, 0x76, 0xaf, 0xa3, 0x39, 0x92, 0x25, 0x01, 0x09,
	0x27, 0x34, 0x89, 0xb0, 0x86, 0x78, 0x3f, 0x00, 0xa0, 0x22, 0x46, 0x6f, 0xc1, 0x8e, 0x93, 0x11,
	0xa3, 0x79, 0xee, 0x36, 0xba, 0xb5, 0x5e, 0x6b, 0xef, 0xf1, 0xa6, 0x33, 0xf9, 0x87, 0x12, 0x87,
	0x35, 0x01, 0x72, 0xc1, 0x26, 0x51, 0x24, 0xb8, 0xea, 0x5d, 0xa3, 0xe7, 0x60, 0x7d, 0x2d, 0xba,
	0x8c, 0x08, 0xa7, 0xe7, 0x64, 0xe9, 0xd6, 0xc4, 0xc8, 0x9b, 0x77, 0x79, 0x2d, 0x71, 0x58, 0x13,
	0xc8, 0x89, 0xcf, 0xd2, 0x79, 0x12, 0xb9, 0xc6, 0xd6, 0x13, 0x0b, 0x1c, 0xd6, 0x04, 0xe8, 0x08,
	0x9a, 0xe9, 0x9c, 0x4b, 0x32, 0x53, 0x90, 0x0d, 0x36, 0x26, 0x7b, 0xa7, 0x80, 0xb8, 0xa4, 0x40,
	0x29, 0x74, 0x38, 0x23, 0x49, 0x9e, 0x11, 0x46, 0x13, 0x3e, 0xcc, 0x58, 0xfa, 0x79, 0x59, 0x7c,
	0x6d, 0x4b, 0xec, 0x7c, 0xb0, 0x31, 0xf5, 0x69, 0x45, 0x72, 0xa2, 0x38, 0xf0, 0x0e, 0xbf, 0x1a,
	0xf4, 0x7e, 0x1a, 0x60, 0x1f, 0x56, 0xea, 0xe7, 0x94, 0x2d, 0xe2, 0x90, 0x0a, 0x77, 0x39, 0x58,
	0x5f, 0xd1, 0x31, 0x58, 0x9c, 0x8c, 0x72, 0xb5, 0xe1, 0xfe, 0xb6, 0x1f, 0xd8, 0x3f, 0x25, 0xa3,
	0xfc, 0x55, 0xc2, 0xd9, 0x12, 0x0b, 0x1e, 0xef, 0x19, 0x38, 0x65, 0x08, 0xdd, 0x86, 0xda, 0x84,
	0x2e, 0x55, 0xcb, 0xe2, 0x88, 0x3a, 0x50, 0x5f, 0x90, 0xe9, 0x9c, 0x0a, 0x77, 0x3a, 0x58, 0x5e,
	0xf6, 0xcd, 0xe7, 0x86, 0xf7, 0xd5, 0x2c, 0xc6, 0x95, 0x5a, 0xdd, 0x07, 0x27, 0x4e, 0x38, 0x65,
	0x9f, 0x48, 0x39, 0x70, 0x15, 0x40, 0x08, 0xac, 0x2c, 0x65, 0x5c, 0xb8, 0xa5, 0x8d, 0xc5, 0x19,
	0x75, 0xa1, 0xa5, 0x36, 0x3a, 0x29, 0x52, 0x96, 0x48, 0xad, 0x87, 0xfe, 0x60, 0xc0, 0x0f, 0xff,
	0x2c, 0x81, 0x98, 0xb6, 0x92, 0x20, 0x68, 0xae, 0x82, 0xfa, 0x37, 0xc3, 0x6c, 0x1a, 0xff, 0x2b,
	0xc6, 0x12, 0x9a, 0xda, 0x42, 0x7f, 0x11, 0x63, 0x6d, 0xad, 0xda, 0xe5, 0xb5, 0xb4, 0x4c, 0xd6,
	0x9a, 0x4c, 0x0f, 0x2b, 0x1f, 0x88, 0x9e, 0x81, 0xbd, 0x0a, 0x2c, 0x66, 0x8e, 0x8d, 0xd2, 0x10,
	0xde, 0x77, 0x03, 0x6c, 0xf5, 0xae, 0x4a, 0x65, 0x8c, 0x2d, 0x95, 0x51, 0xf8, 0x9b, 0x50, 0xe6,
	0x0b, 0xec, 0x5c, 0xf3, 0x02, 0x90, 0x0f, 0x6d, 0x46, 0xa3, 0x98, 0xd1, 0x90, 0x0f, 0xc5, 0xd6,
	0x05, 0x59, 0x3b, 0x70, 0x56, 0x41, 0xe3, 0x91, 0xe5, 0x5e, 0x5c, 0xd4, 0xf0, 0x2d, 0x9d, 0x17,
	0x6e, 0x78, 0x0a, 0x77, 0x54, 0x35, 0x09, 0x43, 0x9a, 0xe7, 0x43, 0xb5, 0xbe, 0x74, 0x81, 0x83,
	0x3b, 0x32, 0xfb, 0x42, 0x24, 0xdf, 0xab, 0x5c, 0x00, 0x1f, 0x9b, 0x7a, 0xf1, 0xb3, 0x86, 0xf8,
	0x91, 0x3f, 0xf9, 0x1d, 0x00, 0x00, 0xff, 0xff, 0xa2, 0x9d, 0xc2, 0x33, 0x33, 0x06, 0x00, 0x00,
}
