// Code generated by vfsgen; DO NOT EDIT.

// +build !dev

package ingress

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Templates statically implements the virtual filesystem provided to vfsgen.
var Templates = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2020, 6, 9, 0, 17, 19, 997926252, time.UTC),
		},
		"/app.yaml": &vfsgen۰CompressedFileInfo{
			name:             "app.yaml",
			modTime:          time.Date(2020, 6, 9, 0, 17, 19, 997812021, time.UTC),
			uncompressedSize: 2636,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x55\x4d\x6f\xe3\x36\x10\xbd\xfb\x57\x0c\x16\x3d\x74\x0f\xb2\xa5\xb4\x49\xbb\x04\x7a\x10\x62\x17\x35\x36\x96\x05\x5b\xde\xab\xc0\x50\x13\x99\x08\xbf\x96\xa4\xdc\x35\x16\xf9\xef\x85\x64\xd9\x96\x1c\xb9\x0d\x10\xb4\x87\xf2\x24\xce\x0c\xdf\x9b\x99\x37\xa4\x82\x20\x18\x51\xc3\xbf\xa0\x75\x5c\x2b\x02\xbb\x68\xf4\xcc\x55\x41\x60\x8d\x76\xc7\x19\xc6\x8c\xe9\x4a\xf9\x91\x44\x4f\x0b\xea\x29\x19\x01\x28\x2a\x91\xc0\x73\x25\x69\xc0\x55\x69\xd1\xb9\xd6\xe8\x0c\x65\x48\xe0\xfb\x77\x18\x27\xc7\x2d\xbc\xbc\x8c\xfe\x89\xe4\x7d\xe8\xce\x20\xab\x0f\xfa\xbd\x41\x02\x89\x2e\x30\xd5\xd6\x8f\x00\x8c\xb6\xde\xd5\x1e\x80\xa0\xd9\x10\x88\xc2\x30\x8c\x1a\x0b\x80\xb1\xda\x6b\xa6\x05\x81\xec\x3e\x6d\x6d\x9e\xda\x12\x7d\xda\x8b\x75\x28\x90\x79\x6d\x0f\x48\xd4\x98\x8b\xec\x2e\xab\xa3\xc6\xb8\xc9\xa9\xc4\x29\x1a\xa1\xf7\x12\xdf\xdb\x43\x00\x41\x1f\x51\xb8\x6b\x59\x1c\xbb\xe0\xbc\xa5\x1e\xcb\xfd\x21\xce\x6a\x21\xb8\x2a\x37\xa6\xa0\x1e\x49\x5b\xa4\xa4\xdf\xd6\x95\x2d\x91\x40\x74\xb6\x6c\x14\xdd\x51\x2e\xe8\xa3\x40\x02\xe1\xab\xb2\x25\xf5\x6c\xfb\xd0\xc9\x60\x28\x07\x00\x8f\xd2\x88\x13\x55\xb7\xe0\xe6\x84\x52\xda\x53\xcf\xb5\x3a\x81\x40\x83\x30\xe6\x7a\xd2\x82\x10\x40\x55\x27\x51\xb4\x01\xa2\xc7\x39\xcc\x0a\x70\xac\xbe\xf9\xee\x4d\x6e\x32\xd4\xe8\x7a\x31\xad\x3c\xe5\x0a\x6d\x07\x3c\x68\x75\xe9\x47\xd6\x8b\x4b\x5a\xb6\xb2\xcc\xeb\x4f\x78\x79\x21\xf5\xa6\x55\xfd\xa0\x50\x2f\x38\xad\x84\x48\xb5\xe0\x6c\xdf\x39\x76\x36\xf6\x4f\xa0\xda\x91\xce\xf6\x9c\x49\xba\x9c\xe6\x49\xbc\x98\xf5\x9c\x00\x3b\x2a\x2a\xfc\xdd\x6a\x49\x2e\x1c\x00\x4f\x1c\x45\xb1\xc2\xa7\xd7\x9e\xd6\x97\x52\xbf\x25\x27\x6d\xc6\x35\xcf\xdf\x52\xaf\xd3\xf8\xfe\x5f\xe6\x6f\xa6\x7c\x30\x89\xcf\x9b\x45\x9c\xdf\x2f\x93\x6c\xb5\x7c\xc8\xd3\x87\x38\x99\xe5\x71\x3a\xcf\xd7\xb3\xd5\x97\xd9\x2a\xdf\xac\x1e\x86\x12\x23\xb0\xf5\xde\x90\xc9\xa4\x91\xbd\x16\xda\x6a\x11\x18\x41\x15\x8e\x1b\x93\xdb\x3b\x8f\x92\xdc\xde\xfd\x1a\x5d\x67\x9d\xc6\x59\x7c\x60\x5c\xcc\xd6\x7f\x0c\xf3\xd4\xc2\x2e\xd0\x6d\xfb\x6a\x5e\x05\xba\xa6\x24\x81\x1f\x7e\x3c\xb6\xfb\xe3\xf8\xfc\xdd\xb4\xfe\xe3\x5b\x90\xe3\xe9\x62\x9e\xe4\xe9\x72\x95\x0d\xe3\x7f\xf8\xf4\x29\x8c\x3e\xbc\x05\x69\xba\x8a\xe7\x49\x9e\xcd\xaf\x65\x5a\x97\x3c\xb5\x94\xab\x8c\x4b\x7c\x63\xdd\xab\x4d\x52\x03\xe6\xd9\xf2\xf3\x2c\xc9\xd3\x38\xbb\xd2\xce\xc9\x8e\xda\x89\xad\xd4\xc4\x21\xb3\xe8\xdd\xe4\xb9\x7a\x44\xab\xd0\xa3\xab\x9f\x88\xf6\x66\xd3\xc3\xcd\x9e\x78\xfd\x8c\xaa\x03\x44\x6d\xe9\x2e\x6f\x91\xad\xd4\x85\x25\x08\x84\x2e\x03\x81\x3b\x14\xbf\x71\xf5\xa4\x3b\xee\xce\x0f\xe3\x1c\x7f\x7a\x27\xd2\x57\x7f\x90\x7a\x09\xbe\x43\x85\xce\xa5\x56\x3f\x62\xff\x2c\x7e\x3b\x3f\x4a\xc7\xc5\xb4\x94\x54\x15\xaf\x2f\x47\x00\x7f\x96\xe8\x07\xcc\xc1\xd7\x65\x30\x60\x6e\x27\x3c\xba\xf9\x65\x1c\x8e\xc3\x71\x44\x6a\x81\x7b\x71\x4f\x94\x8b\xca\x62\xb6\xb5\xe8\xb6\x5a\x14\x04\xa2\x9b\x5e\x00\x57\xdc\x73\x2a\xa6\x28\xe8\x7e\x8d\x4c\xab\xc2\x11\xb8\x0b\x7b\x31\x06\x2d\xd7\xc5\xc9\x7b\xdb\x73\xba\x8a\x31\x74\xae\xcb\xd0\xf3\x7b\x2e\x51\x57\xfe\x74\xfa\xa7\x8e\xd7\x22\x2d\xf8\xff\xa9\x71\xd1\x7f\xd5\x37\xa7\x2b\xcb\xf0\x62\x4e\x2d\x7e\xad\xd0\x5d\x4e\x2f\x00\x33\x15\x81\xdb\x50\x5e\x98\x25\x4a\x6d\xf7\x04\xee\x7e\x5e\xf0\x9e\x4b\x70\xc9\xaf\xa0\xd4\x93\x7f\x0d\xe7\x36\xba\x59\xf0\xbf\x02\x00\x00\xff\xff\x73\xa8\xb9\x03\x4c\x0a\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/app.yaml"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
