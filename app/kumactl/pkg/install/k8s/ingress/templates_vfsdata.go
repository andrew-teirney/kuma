// Code generated by vfsgen; DO NOT EDIT.

// +build !dev

package ingress

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Templates statically implements the virtual filesystem provided to vfsgen.
var Templates = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2020, 6, 10, 1, 35, 33, 639652876, time.UTC),
		},
		"/app.yaml": &vfsgen۰CompressedFileInfo{
			name:             "app.yaml",
			modTime:          time.Date(2020, 6, 10, 1, 35, 33, 639578546, time.UTC),
			uncompressedSize: 2614,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x55\x4d\x6f\xe3\x36\x10\xbd\xfb\x57\x0c\x16\x3d\x74\x0f\xb2\xa4\xb4\xd9\x62\x09\xf4\x20\xc4\x2e\x6a\x24\x96\x05\x5b\xde\xab\xc0\x50\x13\x99\x08\xbf\x96\xa4\xdc\x35\x16\xf9\xef\x85\x6c\xd9\x96\x14\xbb\x0d\x10\xb4\x87\xe5\x49\x9c\x37\xf3\x66\xe6\x0d\x49\x05\x41\x30\xa2\x86\x7f\x41\xeb\xb8\x56\x04\xb6\xf1\xe8\x99\xab\x92\xc0\x0a\xed\x96\x33\x4c\x18\xd3\xb5\xf2\x23\x89\x9e\x96\xd4\x53\x32\x02\x50\x54\x22\x81\xe7\x5a\xd2\x80\xab\xca\xa2\x73\xad\xd1\x19\xca\x90\xc0\xf7\xef\x30\x4e\x8f\x5b\x78\x79\x19\xfd\x5b\x92\xf7\xb1\x3b\x83\xac\x09\xf4\x3b\x83\x04\x52\x5d\x62\xa6\xad\x1f\x01\x18\x6d\xbd\x6b\x10\x80\x60\xbf\x21\x10\x47\x51\x14\xef\x2d\x00\xc6\x6a\xaf\x99\x16\x04\xf2\xbb\xac\xb5\x79\x6a\x2b\xf4\x59\xcf\xd7\xa1\x40\xe6\xb5\x3d\x30\x51\x63\x06\xd5\x0d\xbb\xa3\xc6\xb8\xf0\xd4\xe2\x04\x8d\xd0\x3b\x89\xef\xd5\x10\x40\xd0\x47\x14\xee\x5a\x15\x47\x15\x9c\xb7\xd4\x63\xb5\x3b\xf8\x59\x2d\x04\x57\xd5\xda\x94\xd4\x23\x69\x9b\x94\xf4\xdb\xaa\xb6\x15\x12\x88\xcf\x96\xb5\xa2\x5b\xca\x05\x7d\x14\x48\x20\x7a\xd5\xb6\xa4\x9e\x6d\x1e\x3a\x15\x5c\xaa\x01\xc0\xa3\x34\xe2\x94\xaa\xdb\xf0\x3e\x42\x29\xed\xa9\xe7\x5a\x9d\x48\x60\xcf\x30\xe6\x3a\x6c\x49\x08\xa0\x6a\x8a\x28\x5b\x07\xd1\xcb\x79\x39\x2b\xc0\xb1\xfb\xfd\x77\xef\xe4\xa6\x97\x84\x6e\x16\xd3\xca\x53\xae\xd0\x76\xc8\x83\x76\x2e\x7d\xcf\x66\x71\x49\xab\x76\x2c\xb3\xe6\x13\x5e\x5e\x48\xb3\x69\xa7\x7e\x98\x50\xcf\x39\xab\x85\xc8\xb4\xe0\x6c\xd7\x09\x3b\x1b\xfb\x11\xa8\xb6\xa4\xb3\x3d\x57\x92\x2d\x26\x45\x9a\xcc\xa7\x3d\x10\x60\x4b\x45\x8d\x7f\x58\x2d\xc9\x00\x00\x78\xe2\x28\xca\x25\x3e\xbd\x46\x5a\x2c\xa3\x7e\x43\x4e\xb3\x19\x37\x79\xfe\x31\xf5\x2a\x4b\xee\xfe\xe3\xfc\xfb\x53\x7e\xb1\x88\xfb\xf5\x3c\x29\xee\x16\x69\xbe\x5c\x3c\x14\xd9\x43\x92\x4e\x8b\x24\x9b\x15\xab\xe9\xf2\xcb\x74\x59\xac\x97\x0f\x97\x0a\x3b\x08\x7e\x5f\x4b\x7a\x67\x92\xb2\x6c\x46\xd9\x97\x7b\xc0\x3f\x49\xf2\xe4\xc0\x3d\x9f\xae\xfe\xbc\xce\x38\x47\xb7\x79\x23\xd1\xb5\x99\x11\xf8\xe9\xe7\xa3\xb0\x1f\xc7\xe7\xef\xbd\xc8\x1f\xdf\xc2\x9c\x4c\xe6\xb3\xb4\xc8\x16\xcb\xfc\x32\xff\x87\xcf\x9f\xa3\xf8\xc3\x5b\x98\x26\xcb\x64\x96\x16\xf9\xec\x5a\xa5\x4d\xcb\x13\x4b\xb9\xca\xb9\xc4\x37\xf6\xbd\x5c\xa7\x0d\x61\x91\x2f\xee\xa7\x69\x91\x25\xf9\x15\x39\xc3\x2d\xb5\xa1\xad\x55\xe8\x90\x59\xf4\x2e\x7c\xae\x1f\xd1\x2a\xf4\xe8\x9a\xc7\xa0\xbd\xc3\xf4\x70\x87\x43\xaf\x9f\x51\x75\x88\xa8\xad\xdc\xf0\xbe\xd8\x5a\x0d\x2c\x41\x20\x74\x15\x08\xdc\xa2\xf8\x9d\xab\x27\xdd\x81\x3b\xbf\x86\xb3\xff\xe9\x45\xc8\x5e\xfd\x2b\x9a\x25\xf8\x16\x15\x3a\x97\x59\xfd\x88\xfd\x58\xfc\x76\x7e\x7e\x8e\x8b\x69\x29\xa9\x2a\x5f\x5f\x83\x00\xfe\xaa\xd0\x5f\x30\x07\x5f\x17\xc1\x05\xf3\xc6\x7b\x43\xc2\x30\xbe\xf9\x6d\x1c\x8d\xa3\x71\x4c\x9a\x01\xf7\xfc\x9e\x28\x17\xb5\xc5\x7c\x63\xd1\x6d\xb4\x28\x09\xc4\x37\x3d\x07\xae\xb8\xe7\x54\x4c\x50\xd0\xdd\x0a\x99\x56\xa5\x23\xf0\x29\xea\xf9\x18\xb4\x5c\x97\x27\xf4\xb6\x07\xba\x9a\x31\x74\xae\x9b\xa1\x87\x7b\x2e\x51\xd7\xfe\x14\xfd\x4b\x07\xb5\x48\x4b\xfe\x23\x09\x17\xff\x5f\xba\x39\x5d\x5b\x86\x83\x73\x6a\xf1\x6b\x8d\x6e\x78\x7a\x01\x98\xa9\x09\xdc\x46\x72\x60\x96\x28\xb5\xdd\x11\xf8\xf4\xeb\x9c\xf7\x20\xc1\x25\xbf\xc2\xd2\x9c\xfc\x6b\x3c\xb7\xf1\xcd\x9c\xff\x1d\x00\x00\xff\xff\x24\xd2\x91\x1b\x36\x0a\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/app.yaml"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
